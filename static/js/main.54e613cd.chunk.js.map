{"version":3,"sources":["components/recipe.component.jsx","App.js","reportWebVitals.js","index.js","recipe.module.css"],"names":["Recipe","title","calories","image","ingredients","className","style","recipe","map","ingredient","text","src","alt","App","useState","recipes","setRecipes","search","setSearch","query","setQuery","useEffect","getRecipes","a","fetch","response","json","data","hits","console","log","onSubmit","e","preventDefault","type","value","onChange","target","label","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"yQAkBeA,EAfA,SAAC,GAA6C,IAA3CC,EAA0C,EAA1CA,MAAOC,EAAmC,EAAnCA,SAAUC,EAAyB,EAAzBA,MAAOC,EAAkB,EAAlBA,YACxC,OACE,sBAAKC,UAAWC,IAAMC,OAAtB,UACE,6BAAKN,IACL,6BACGG,EAAYI,KAAI,SAACC,GAAD,OACf,6BAA2BA,EAAWC,MAA7BD,EAAWC,WAGxB,4BAAIR,IACJ,qBAAKG,UAAWC,IAAMH,MAAOQ,IAAKR,EAAOS,IAAI,SCyDpCC,EAjEH,WAEV,IAFgB,EAScC,mBAAS,IATvB,mBASTC,EATS,KASAC,EATA,OAUYF,mBAAS,IAVrB,mBAUTG,EAVS,KAUDC,EAVC,OAWUJ,mBAAS,WAXnB,mBAWTK,EAXS,KAWFC,EAXE,KAchBC,qBAAU,WACRC,MACC,CAACH,IAUJ,IAAMG,EAAU,uCAAG,8BAAAC,EAAA,sEACMC,MAAM,mCAAD,OACSL,EADT,mBAzBf,WAyBe,oBAxBd,qCAuBG,cACXM,EADW,gBAIEA,EAASC,OAJX,OAIXC,EAJW,OAKjBX,EAAWW,EAAKC,MAChBC,QAAQC,IAAIH,EAAKC,MANA,2CAAH,qDAsBhB,OACE,sBAAKvB,UAAW,MAAhB,UACE,uBAAM0B,SARQ,SAAAC,GAChBA,EAAEC,iBACFb,EAASH,GACTC,EAAU,KAKqBb,UAAU,cAAvC,UACE,uBAAOA,UAAU,aAAa6B,KAAK,OAAOC,MAASlB,EAAQmB,SAb5C,SAAAJ,GACnBd,EAAUc,EAAEK,OAAOF,UAaf,wBAAQ9B,UAAU,gBAAgB6B,KAAK,SAAvC,uBAIF,qBAAK7B,UAAU,UAAf,SACCU,EAAQP,KAAI,SAAAD,GAAM,OACjB,cAAC,EAAD,CAAmCN,MAAOM,EAAOA,OAAO+B,MAAOpC,SAAUK,EAAOA,OAAOL,SAAUC,MAAOI,EAAOA,OAAOJ,MAAOC,YAAaG,EAAOA,OAAOH,aAA1IG,EAAOA,OAAO+B,gBCnDrBC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K,kBCfAc,EAAOC,QAAU,CAAC,OAAS,uBAAuB,MAAQ,yB","file":"static/js/main.54e613cd.chunk.js","sourcesContent":["import React from \"react\";\r\nimport style from \"../recipe.module.css\";\r\n\r\nconst Recipe = ({ title, calories, image, ingredients }) => {\r\n  return (\r\n    <div className={style.recipe}>\r\n      <h1>{title}</h1>\r\n      <ol>\r\n        {ingredients.map((ingredient) => (\r\n          <li key={ingredient.text}>{ingredient.text}</li>\r\n        ))}\r\n      </ol>\r\n      <p>{calories}</p>\r\n      <img className={style.image} src={image} alt=\"\" />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Recipe;\r\n","import React, {useEffect,useState} from \"react\";\nimport './App.css';\n// import './components/recipe.component'\nimport Recipe from \"./components/recipe.component\";\n\nconst App = () => {\n\n  const APP_ID = \"b11b9fa6\";\n  const APP_KEY = \"44e20c360e7733c867a7375e7912c18b\";\n  // const exampleReq = \n  // `https://api.edamam.com/search?q=chicken&app_id=${APP_ID}&app_key=${APP_KEY}`;\n\n  //This is similar to this.state in classes, here array destructuring is taking place as useState() is giving\n  // 2 values in return, the 2nd variable is function  can be used to change the value of first one. \n  const [recipes, setRecipes] = useState([]);\n  const [search, setSearch] = useState(\"\");\n  const [query, setQuery] = useState('chicken');\n\n  //This gets fired whenever the rendering happens, this is similar to lifecycle methods in classes, this function takes an arrow fn as a parameter.\n  useEffect(() => {\n    getRecipes() ;\n  }, [query]); \n\n  // useEffect(() => {\n  //   console.log(recipes[0].recipe.label); \n  // }, [recipes]); \n//As this fn. gets fired whenever the rendering happens, thus we give it a second argument as empty array which means it will only run\n//once, other than that we can also set the state as in we can pass in or set it to something on the change of which this will change, like \n// we can pass in \"recipes\"  \n\n\n  const getRecipes = async () => {\n    const response = await fetch( \n      `https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${APP_KEY}`\n    );\n    const data = await response.json();\n    setRecipes(data.hits);\n    console.log(data.hits);\n  };\n\n  // Any time we get the data from the external source or hit the external API, we neeed to use async await, as we don't know how much time\n  // it would take to get the data from that source, thus we need to use await with every promise, or we can use .then approach but this simpler. \n\n  const updateSearch = e => {\n    setSearch(e.target.value);\n  }\n\n  const getSearch = e => {\n    e.preventDefault();\n    setQuery(search);\n    setSearch(\"\");\n  }\n\n  return(\n    <div className= \"App\">\n      <form onSubmit = {getSearch} className=\"search-form\">\n        <input className=\"search-bar\" type=\"text\" value = {search} onChange={updateSearch} />\n        <button className=\"search-button\" type=\"submit\">\n          search\n        </button>\n      </form>\n      <div className=\"recipes\">\n      {recipes.map(recipe => (\n        <Recipe key= {recipe.recipe.label} title={recipe.recipe.label} calories={recipe.recipe.calories} image={recipe.recipe.image} ingredients={recipe.recipe.ingredients}/>\n      ))  }\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"recipe\":\"recipe_recipe__3iJOS\",\"image\":\"recipe_image__220FM\"};"],"sourceRoot":""}